{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport default function Login(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  function logar() {\n    var headerOptions, response, token;\n    return _regeneratorRuntime.async(function logar$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            headerOptions = {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                user: user,\n                password: password\n              })\n            };\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('https://mobile.ect.ufrn.br:3000/login', headerOptions));\n\n          case 3:\n            response = _context.sent;\n\n            if (!(response.status === 200)) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 7:\n            token = _context.sent;\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('token', token));\n\n          case 10:\n            navigation.navigate('HomeScreen');\n            _context.next = 14;\n            break;\n\n          case 13:\n            Alert.alert('Erro', 'Usuário ou senha inválidos');\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(StatusBar, {\n    style: \"auto\"\n  }), React.createElement(View, {\n    style: styles.loginContainer\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"Usu\\xE1rio...\",\n    value: user,\n    onChangeText: setUser\n  }), React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"Senha...\",\n    value: password,\n    onChangeText: setPassword,\n    secureTextEntry: true\n  }), React.createElement(TouchableOpacity, {\n    style: styles.enviar,\n    onPress: function onPress() {\n      return logar();\n    }\n  }, React.createElement(Text, null, \"Enviar\"))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f00',\n    justifyContent: 'center'\n  },\n  loginContainer: {\n    backgroundColor: 'yellow',\n    justifyContent: 'center',\n    margin: 20,\n    padding: 40,\n    borderColor: 'gray',\n    borderWidth: 1,\n    backgroundColor: '#f9f6eb',\n    borderRadius: 10\n  },\n  input: {\n    height: 40,\n    marginTop: 10,\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: 'gray',\n    backgroundColor: 'white',\n    paddingLeft: 10\n  },\n  enviar: {\n    padding: 10,\n    width: 120,\n    backgroundColor: 'green',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 5,\n    marginTop: 20,\n    alignSelf: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/thiag/apps/primeiroapp/screens/Login.js"],"names":["StatusBar","React","useState","AsyncStorage","Login","navigation","user","setUser","password","setPassword","logar","headerOptions","method","headers","body","JSON","stringify","fetch","response","status","text","token","setItem","navigate","Alert","alert","styles","container","loginContainer","input","enviar","StyleSheet","create","flex","backgroundColor","justifyContent","margin","padding","borderColor","borderWidth","borderRadius","height","marginTop","paddingLeft","width","alignItems","alignSelf"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React, { useState } from 'react';\r\nimport {StyleSheet, TextInput, TouchableOpacity, Text, View, Alert} from 'react-native';\r\nimport  AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nexport default function Login({navigation}) {\r\n    const [user, setUser] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    async function logar(){\r\n        const headerOptions = {\r\n            method: 'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({user,password})\r\n        };\r\n        const response = await fetch('https://mobile.ect.ufrn.br:3000/login', headerOptions);\r\n        if(response.status === 200){\r\n            const token = await response.text();\r\n            await AsyncStorage.setItem('token', token);\r\n            navigation.navigate('HomeScreen');\r\n        }else{\r\n            Alert.alert(\r\n                'Erro',\r\n                'Usuário ou senha inválidos',\r\n            );\r\n        }\r\n    }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <StatusBar style=\"auto\" />\r\n      <View style={styles.loginContainer}>\r\n        <TextInput \r\n            style={styles.input}\r\n            placeholder=\"Usuário...\" \r\n            value={user}\r\n            onChangeText={setUser}/>\r\n        <TextInput \r\n            style={styles.input} \r\n            placeholder=\"Senha...\" \r\n            value={password} \r\n            onChangeText={setPassword} \r\n            secureTextEntry={true}/>\r\n        <TouchableOpacity \r\n            style={styles.enviar} \r\n            onPress={()=>logar()}>\r\n            <Text>Enviar</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#f00',\r\n    justifyContent: 'center',\r\n  },\r\n  loginContainer:{\r\n    backgroundColor: 'yellow',\r\n    justifyContent: 'center',\r\n    margin: 20,\r\n    padding: 40,\r\n    borderColor: 'gray',\r\n    borderWidth: 1,\r\n    backgroundColor: '#f9f6eb', \r\n    borderRadius: 10,\r\n  },\r\n  input:{\r\n      height: 40,\r\n      marginTop: 10,\r\n      borderWidth: 1,\r\n      borderRadius: 5,\r\n      borderColor: 'gray',\r\n      backgroundColor: 'white',\r\n      paddingLeft: 10,\r\n  },\r\n  enviar:{\r\n      padding: 10,\r\n      width: 120,\r\n      backgroundColor: 'green',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      borderRadius: 5,\r\n      marginTop: 20,\r\n      alignSelf: 'center',\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}