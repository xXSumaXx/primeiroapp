{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState, Component } from \"react\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { FontAwesome5 } from '@expo/vector-icons';\nimport { WebView } from 'react-native-webview';\nexport default function ChatScreen(_ref) {\n  var route = _ref.route;\n  var id = route.params.id;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  useEffect(function () {\n    function getData() {\n      var response, email;\n      return _regeneratorRuntime.async(function getData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch('https://mobile.ect.ufrn.br:3002/emails/' + id));\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 5:\n              email = _context.sent;\n              setEmail(email);\n              console.log(email);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    getData();\n  }, []);\n\n  var MyInlineWeb = function (_Component) {\n    _inherits(MyInlineWeb, _Component);\n\n    var _super = _createSuper(MyInlineWeb);\n\n    function MyInlineWeb() {\n      _classCallCheck(this, MyInlineWeb);\n\n      return _super.apply(this, arguments);\n    }\n\n    _createClass(MyInlineWeb, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(View, {\n          style: styles.container\n        }, React.createElement(StatusBar, {\n          style: \"auto\"\n        }), React.createElement(View, {\n          style: styles.titulo\n        }, React.createElement(Text, {\n          style: styles.titulo1\n        }, email.tittle), React.createElement(View, null, React.createElement(FontAwesome5, {\n          style: email.star ? styles.favorito1 : styles.favorito,\n          name: \"star\",\n          size: 16\n        }))), React.createElement(View, {\n          style: styles.info\n        }, React.createElement(Image, {\n          style: styles.image,\n          source: {\n            uri: email.picture\n          }\n        }), React.createElement(View, {\n          style: styles.info1\n        }, React.createElement(Text, {\n          style: styles.titulo1\n        }, email.from, \", \", email.time), React.createElement(Text, {\n          style: styles.titulo1\n        }, email.to))), React.createElement(WebView, {\n          style: styles.corpo,\n          originWhitelist: ['*'],\n          source: {\n            html: '<h1><center>Hello world</center></h1>'\n          }\n        }));\n      }\n    }]);\n\n    return MyInlineWeb;\n  }(Component);\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'green'\n  },\n  titulo: {\n    flexDirection: 'row',\n    width: '100%',\n    height: 150,\n    backgroundColor: '#4F4F4F'\n  },\n  titulo1: {\n    fontSize: 27,\n    padding: 5\n  },\n  info: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    height: 100,\n    backgroundColor: 'gray'\n  },\n  corpo: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  corpo1: {\n    color: 'black',\n    fontSize: 20,\n    padding: 5\n  },\n  favorito: {\n    justifyContent: 'center',\n    alignItems: 'flex-end',\n    color: \"black\"\n  },\n  favorito1: {\n    justifyContent: 'center',\n    alignItems: 'flex-end',\n    color: \"blue\"\n  },\n  image: {\n    height: 60,\n    width: 60,\n    margin: 5,\n    borderRadius: 25\n  }\n});","map":{"version":3,"sources":["C:/Users/thiag/apps/primeiroapp/screens/ChatScreen.js"],"names":["React","useEffect","useState","Component","StatusBar","FontAwesome5","WebView","ChatScreen","route","id","params","email","setEmail","getData","fetch","response","json","console","log","MyInlineWeb","styles","container","titulo","titulo1","tittle","star","favorito1","favorito","info","image","uri","picture","info1","from","time","to","corpo","html","StyleSheet","create","flex","backgroundColor","flexDirection","width","height","fontSize","padding","alignItems","corpo1","color","justifyContent","margin","borderRadius"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Component } from \"react\";\r\nimport {StatusBar} from 'expo-status-bar';\r\nimport { StyleSheet, View, Text, Image} from \"react-native\";\r\nimport {FontAwesome5} from '@expo/vector-icons';\r\nimport { WebView } from 'react-native-webview';\r\n\r\n\r\nexport default function ChatScreen({route}){\r\n    const {id} = route.params;\r\n    \r\n    const [email, setEmail] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        async function getData(){\r\n            const response = await fetch('https://mobile.ect.ufrn.br:3002/emails/'+id);\r\n            const email = await response.json();\r\n            setEmail(email);\r\n            console.log(email);\r\n        }\r\n        getData();\r\n    },[]);\r\n    class MyInlineWeb extends Component {\r\n        render(){\r\n            return(\r\n                <View style={styles.container}>\r\n                    <StatusBar style='auto'/>\r\n                    <View style={styles.titulo}>\r\n                        <Text style={styles.titulo1}>{email.tittle}</Text>\r\n                        <View>\r\n                            <FontAwesome5 style={email.star? styles.favorito1 : styles.favorito} name=\"star\" size={16}/>\r\n                        </View>\r\n                    </View>\r\n                    <View style={styles.info}>\r\n                        <Image style={styles.image} source={{uri: email.picture}}/>\r\n                        <View style={styles.info1}>\r\n                            <Text style={styles.titulo1}>{email.from}, {email.time}</Text>\r\n                            <Text style={styles.titulo1}>{email.to}</Text>\r\n                        </View>\r\n                    </View>\r\n                    <WebView \r\n                        style={styles.corpo}\r\n                        originWhitelist={['*']}\r\n                        source={{ html: '<h1><center>Hello world</center></h1>'}}\r\n                    />\r\n                </View>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        flex: 1,\r\n        backgroundColor: 'green',\r\n    },\r\n    titulo:{\r\n        flexDirection: 'row',\r\n        width:'100%',\r\n        height:150,\r\n        backgroundColor: '#4F4F4F',\r\n    },\r\n    titulo1:{\r\n        fontSize:27,\r\n        padding: 5,\r\n    },\r\n    info:{\r\n        flexDirection:'row',\r\n        alignItems: 'center',\r\n        height:100,\r\n        backgroundColor: 'gray',\r\n    },\r\n    corpo:{\r\n        flex:1,\r\n        backgroundColor: '#fff',\r\n    },\r\n    corpo1:{\r\n        color:'black',\r\n        fontSize:20,\r\n        padding: 5,\r\n    },\r\n    favorito:{\r\n        justifyContent:'center',\r\n        alignItems:'flex-end',\r\n        color:\"black\",\r\n    },\r\n    favorito1:{\r\n        justifyContent:'center',\r\n        alignItems:'flex-end',\r\n        color:\"blue\",\r\n    },\r\n    image:{\r\n        height:60,\r\n        width:60,\r\n        margin:5,\r\n        borderRadius:25,\r\n    },\r\n});"]},"metadata":{},"sourceType":"module"}